(()=>{"use strict";const e=class extends class{constructor(){this.functionEventMap=new Map}emit(e,t){const n=this.functionEventMap.get(e);if(n)for(const s of n)s.fn(t),s.isOnce&&this.remove(e,s.fn)}on(e,t){this.functionEventMap.has(e)||this.functionEventMap.set(e,new Set);const n=this.functionEventMap.get(e);let s=!1;for(const e of n)if(e.fn===t){s=!0,e.isOnce=!1;break}s||n.add({fn:t,isOnce:!1})}once(e,t){this.functionEventMap.has(e)||this.functionEventMap.set(e,new Set);const n=this.functionEventMap.get(e);let s=!1;for(const e of n)if(e.fn===t){s=!0,e.isOnce=!0;break}s||n.add({fn:t,isOnce:!0})}remove(e,t){const n=this.functionEventMap.get(e);if(n){for(const e of n)if(e.fn===t){n.delete(e);break}0===n.size&&this.functionEventMap.delete(e)}}removeAll(e){this.functionEventMap.delete(e)}hasEventName(e){return!!this.functionEventMap.has(e)&&this.functionEventMap.get(e).size>0}}{constructor(e){super(),this.worker=e,navigator.serviceWorker.addEventListener("message",this.handleMessage.bind(this)),window.addEventListener("beforeunload",(()=>{this.sendMessageToWorker({type:"unregister"})}))}handleMessage(e){const{from:t,type:n,eventName:s,data:o}=e.data;"service worker event"===t&&("emit"===n&&super.emit(s,o),"removeAll"===n&&super.removeAll(s))}sendMessageToWorker(e){return e.from="service worker event",this.worker.postMessage(e)}emit(e,t){this.sendMessageToWorker({type:"emit",eventName:e,data:t}),super.emit(e,t),super.hasEventName(e)||this.sendMessageToWorker({type:"remove",eventName:e})}on(e,t){this.sendMessageToWorker({type:"on",eventName:e}),super.on(e,t)}once(e,t){this.sendMessageToWorker({type:"once",eventName:e}),super.once(e,t)}remove(e,t){super.remove(e,t),super.hasEventName(e)||this.sendMessageToWorker({type:"remove",eventName:e})}removeAll(e){this.sendMessageToWorker({type:"removeAll",eventName:e}),super.removeAll(e)}};(async()=>{const t=await navigator.serviceWorker.register(location.pathname+"service-worker.bundle.js");let n;if(t.installing)n=t.installing;else if(t.waiting)n=t.waiting;else if(t.active){n=t.active;const s=new e(n);return void(window.swe=s)}n&&n.addEventListener("statechange",(function(t){if("activated"===t.target.state){const t=new e(n);window.swe=t}}))})()})();