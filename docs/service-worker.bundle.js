(()=>{const e=new Map,t=(t,s)=>{self.clients.get(t.id).then((o=>{o?(s.from="service worker event",o.postMessage(s)):e.delete(t)}))},s=t=>{const s=t.source;e.set(s,new Set)},o=t=>{const s=t.source;e.delete(s)};self.addEventListener("message",(a=>{const r=a.source;let n=[];Array.isArray(a.data)?n=a.data:n[0]=a.data;for(const c of n){const{from:n,type:d,eventName:f,data:i}=c;if("service worker event"!==n)return;if("unregister"===d&&o(a),("on"===d||"once"===d)&&(e.has(r)||s(a),e.get(r).add(f)),"emit"===d)for(const[s,o]of e)o.has(f)&&r!==s&&t(s,{type:d,eventName:f,data:i});if("remove"===d){const t=e.get(r);t&&t.delete(f)}if("removeAll"===d)for(const[s,o]of e)o.has(f)&&(t(s,{type:d,eventName:f,data:i}),o&&o.delete(f))}}))})();